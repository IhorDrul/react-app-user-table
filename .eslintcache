[{"D:\\react-app-user-table\\src\\index.js":"1","D:\\react-app-user-table\\src\\reportWebVitals.js":"2","D:\\react-app-user-table\\src\\App.js":"3","D:\\react-app-user-table\\src\\Pages\\Contacts\\index.jsx":"4","D:\\react-app-user-table\\src\\Pages\\Contacts\\useContact.jsx":"5","D:\\react-app-user-table\\src\\Pages\\Contacts\\ContactsTable\\index.jsx":"6","D:\\react-app-user-table\\src\\Components\\CopyText\\index.jsx":"7","D:\\react-app-user-table\\src\\Constants\\nationality.jsx":"8","D:\\react-app-user-table\\src\\Pages\\Contacts\\ToggleViewMode\\index.js":"9","D:\\react-app-user-table\\src\\Pages\\Contacts\\constats.js":"10"},{"size":500,"mtime":1607682702697,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1607682702697,"results":"13","hashOfConfig":"12"},{"size":159,"mtime":1608557224948,"results":"14","hashOfConfig":"12"},{"size":2344,"mtime":1608730117728,"results":"15","hashOfConfig":"12"},{"size":1446,"mtime":1608644419431,"results":"16","hashOfConfig":"12"},{"size":3115,"mtime":1609626438224,"results":"17","hashOfConfig":"12"},{"size":1797,"mtime":1608666861173,"results":"18","hashOfConfig":"12"},{"size":954,"mtime":1608718655732,"results":"19","hashOfConfig":"12"},{"size":1200,"mtime":1608729521619,"results":"20","hashOfConfig":"12"},{"size":75,"mtime":1608728730587,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1foeqzt",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\react-app-user-table\\src\\index.js",[],["46","47"],"D:\\react-app-user-table\\src\\reportWebVitals.js",[],"D:\\react-app-user-table\\src\\App.js",[],"D:\\react-app-user-table\\src\\Pages\\Contacts\\index.jsx",[],"D:\\react-app-user-table\\src\\Pages\\Contacts\\useContact.jsx",["48"],"import {useEffect, useState} from \"react\";\r\n\r\nexport const useContacts = () => {\r\n    const [data, setData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isError, setIsError] = useState(false)\r\n\r\n    useEffect(() =>{\r\n        //setIsLoading(true)\r\n        const getContacts = async () => {\r\n            try {\r\n                setIsLoading(true)\r\n                const response = await  fetch('https://randomuser.me/api/?results=20')\r\n                const {results, error} = await response.json()\r\n                if (error){\r\n                    throw new Error(error)\r\n                }\r\n                setData(results)\r\n                setIsError(false)\r\n            } catch {\r\n                setIsError(true)\r\n            } finally {\r\n                setIsLoading(false)\r\n            }\r\n            {/**\r\n             fetch('https://randomuser.me/api/?results=200')\r\n             .then(response => response.json())\r\n             .then(({results}) => {\r\n                    setContacts(results)\r\n                    console.log(results)\r\n                    setIsLoading(false)\r\n                    setIsError(false)\r\n                })\r\n             .catch(() => {\r\n                    setIsLoading(false)\r\n                    setIsError(true)\r\n                })\r\n\r\n             **/}\r\n        }\r\n        getContacts()\r\n    },[])\r\n    return {\r\n        data,\r\n        isLoading,\r\n        isError\r\n    }\r\n}\r\n","D:\\react-app-user-table\\src\\Pages\\Contacts\\ContactsTable\\index.jsx",["49","50","51"],"D:\\react-app-user-table\\src\\Components\\CopyText\\index.jsx",["52"],"import {useCallback, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {useCopyToClipboard} from 'react-use'\r\nimport Box from '@material-ui/core/Box'\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { ClickAwayListener } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        cursor: 'pointer'\r\n    },\r\n    icon: {\r\n        marginRight: '5px'\r\n    }\r\n})\r\n\r\nexport const CopyToClipboardText = ({text}) => {\r\n    const [state, copyToClipboard] = useCopyToClipboard()\r\n    const classes = useStyles()\r\n    const [statusCopy, setStatusCopy] = useState('copy')\r\n    const tooltipTitle = () => {\r\n        switch (statusCopy) {\r\n            case 'copy':\r\n                return 'Copy'\r\n            case 'copied':\r\n                return 'Copied'\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n    const onClickCopy = useCallback(() => {\r\n        copyToClipboard(text)\r\n        setStatusCopy('copied')\r\n    },[copyToClipboard,text])\r\n    const onMouseLeaveCopy = useCallback(() =>{\r\n        setStatusCopy('copy')\r\n    },[setStatusCopy])\r\n    return <ClickAwayListener onClickAway={onMouseLeaveCopy}>\r\n        <Tooltip title={tooltipTitle()} placement={'top'}>\r\n            <Box display = 'flex'\r\n                 alignItems = 'center'\r\n                 className = {classes.root}\r\n                 onClick={onClickCopy}\r\n            >\r\n                <FileCopyIcon fontSize = 'small' className = {classes.icon}/>\r\n                {text}\r\n            </Box>\r\n        </Tooltip>\r\n        </ClickAwayListener>\r\n\r\n}\r\n\r\nCopyToClipboardText.propTypes = {\r\n    text: PropTypes.string.isRequired\r\n}\r\n","D:\\react-app-user-table\\src\\Constants\\nationality.jsx",[],"D:\\react-app-user-table\\src\\Pages\\Contacts\\ToggleViewMode\\index.js",["53","54","55"],"import React, {useState, useEffect, useCallback} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport {DATA_VIEW_MODE} from \"../constats\";\r\n\r\nexport const ToggleViewMode = ({setDataViewMode, dataViewMode}) => {\r\n    const handleChange = useCallback((event, nextView) => {\r\n        setDataViewMode(nextView)\r\n    },[dataViewMode]);\r\n    return(\r\n        <ToggleButtonGroup value={dataViewMode} exclusive onChange={handleChange}>\r\n            <ToggleButton value={DATA_VIEW_MODE.GRID} aria-label={DATA_VIEW_MODE.GRID}>\r\n                <ViewModuleIcon/>\r\n            </ToggleButton>\r\n            <ToggleButton value={DATA_VIEW_MODE.TABLE} aria-label={DATA_VIEW_MODE.TABLE}>\r\n                <ViewListIcon/>\r\n            </ToggleButton>\r\n        </ToggleButtonGroup>\r\n    )\r\n}\r\n\r\nToggleViewMode.propTypes = {\r\n    dataViewMode: PropTypes.oneOf([DATA_VIEW_MODE.TABLE, DATA_VIEW_MODE.GRID]).isRequired,\r\n    setDataViewMode: PropTypes.func.isRequired\r\n}\r\n","D:\\react-app-user-table\\src\\Pages\\Contacts\\constats.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":25,"column":13,"nodeType":"62","messageId":"63","endLine":39,"endColumn":18},{"ruleId":"64","severity":1,"message":"65","line":11,"column":8,"nodeType":"66","messageId":"67","endLine":11,"endColumn":14},{"ruleId":"64","severity":1,"message":"68","line":12,"column":8,"nodeType":"66","messageId":"67","endLine":12,"endColumn":16},{"ruleId":"64","severity":1,"message":"69","line":14,"column":8,"nodeType":"66","messageId":"67","endLine":14,"endColumn":11},{"ruleId":"64","severity":1,"message":"70","line":21,"column":12,"nodeType":"66","messageId":"67","endLine":21,"endColumn":17},{"ruleId":"64","severity":1,"message":"71","line":1,"column":16,"nodeType":"66","messageId":"67","endLine":1,"endColumn":24},{"ruleId":"64","severity":1,"message":"72","line":1,"column":26,"nodeType":"66","messageId":"67","endLine":1,"endColumn":35},{"ruleId":"73","severity":1,"message":"74","line":12,"column":7,"nodeType":"75","endLine":12,"endColumn":21,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'format' is defined but never used.","Identifier","unusedVar","'parseISO' is defined but never used.","'Box' is defined but never used.","'state' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setDataViewMode'. Either include it or remove the dependency array. If 'setDataViewMode' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [setDataViewMode]",{"range":"82","text":"83"},[564,578],"[setDataViewMode]"]